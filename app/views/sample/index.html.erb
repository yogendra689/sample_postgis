<!-- <!DOCTYPE html>
<html>
    <head>
        <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
        <meta charset="UTF-8">
        <title>Drawing Tools</title>
        <script type="text/javascript"
        src="http://maps.google.com/maps/api/js?sensor=false&libraries=drawing"></script>
        <style type="text/css">
            #map, html, body {
                padding: 0;
                margin: 0;
                width: 960px;
                height: 700px;
            }

            #panel {
                width: 200px;
                font-family: Arial, sans-serif;
                font-size: 13px;
                float: right;
                margin: 10px;
            }

            #color-palette {
                clear: both;
            }

            .color-button {
                width: 14px;
                height: 14px;
                font-size: 0;
                margin: 2px;
                float: left;
                cursor: pointer;
            }

            #delete-button {
                margin-top: 5px;
            }
        </style>
        <script type="text/javascript">
            var drawingManager;
            var selectedShape;
            var colors = ['#1E90FF', '#FF1493', '#32CD32', '#FF8C00', '#4B0082'];
            var selectedColor;
            var colorButtons = {};

            function clearSelection () {
                if (selectedShape) {
                    selectedShape.setEditable(false);
                    selectedShape = null;
                }
            }

            function setSelection (shape) {
                clearSelection();
                selectedShape = shape;
                shape.setEditable(true);
                selectColor(shape.get('fillColor') || shape.get('strokeColor'));
            }

            function deleteSelectedShape () {
                if (selectedShape) {
                    selectedShape.setMap(null);
                }
            }

            function selectColor (color) {
                selectedColor = color;
                for (var i = 0; i < colors.length; ++i) {
                    var currColor = colors[i];
                    colorButtons[currColor].style.border = currColor == color ? '2px solid #789' : '2px solid #fff';
                }

                // Retrieves the current options from the drawing manager and replaces the
                // stroke or fill color as appropriate.
                var polylineOptions = drawingManager.get('polylineOptions');
                polylineOptions.strokeColor = color;
                drawingManager.set('polylineOptions', polylineOptions);

                var rectangleOptions = drawingManager.get('rectangleOptions');
                rectangleOptions.fillColor = color;
                drawingManager.set('rectangleOptions', rectangleOptions);

                var circleOptions = drawingManager.get('circleOptions');
                circleOptions.fillColor = color;
                drawingManager.set('circleOptions', circleOptions);

                var polygonOptions = drawingManager.get('polygonOptions');
                polygonOptions.fillColor = color;
                drawingManager.set('polygonOptions', polygonOptions);
            }

            function setSelectedShapeColor (color) {
                if (selectedShape) {
                    if (selectedShape.type == google.maps.drawing.OverlayType.POLYLINE) {
                        selectedShape.set('strokeColor', color);
                    } else {
                        selectedShape.set('fillColor', color);
                    }
                }
            }

            function makeColorButton (color) {
                var button = document.createElement('span');
                button.className = 'color-button';
                button.style.backgroundColor = color;
                google.maps.event.addDomListener(button, 'click', function () {
                    selectColor(color);
                    setSelectedShapeColor(color);
                });

                return button;
            }

            function buildColorPalette () {
                var colorPalette = document.getElementById('color-palette');
                for (var i = 0; i < colors.length; ++i) {
                    var currColor = colors[i];
                    var colorButton = makeColorButton(currColor);
                    colorPalette.appendChild(colorButton);
                    colorButtons[currColor] = colorButton;
                }
                selectColor(colors[0]);
            }

            function initialize () {
                var map = new google.maps.Map(document.getElementById('map'), {
                    zoom: 16,
                    center: new google.maps.LatLng(52.25097, 20.97114),
                    mapTypeId: google.maps.MapTypeId.SATELLITE,
                    disableDefaultUI: true,
                    zoomControl: true
                });

                var polyOptions = {
                    strokeWeight: 0,
                    fillOpacity: 0.45,
                    editable: true,
                    draggable: true
                };
                // Creates a drawing manager attached to the map that allows the user to draw
                // markers, lines, and shapes.
                drawingManager = new google.maps.drawing.DrawingManager({
                    drawingMode: google.maps.drawing.OverlayType.POLYGON,
                    markerOptions: {
                        draggable: true
                    },
                    polylineOptions: {
                        editable: true,
                        draggable: true
                    },
                    rectangleOptions: polyOptions,
                    circleOptions: polyOptions,
                    polygonOptions: polyOptions,
                    map: map
                });

                google.maps.event.addListener(drawingManager, 'overlaycomplete', function (e) {
                    if (e.type !== google.maps.drawing.OverlayType.MARKER) {
                        // Switch back to non-drawing mode after drawing a shape.
                        drawingManager.setDrawingMode(null);

                        // Add an event listener that selects the newly-drawn shape when the user
                        // mouses down on it.
                        var newShape = e.overlay;
                        newShape.type = e.type;
                        google.maps.event.addListener(newShape, 'click', function (e) {
                            if (e.vertex !== undefined) {
                                if (newShape.type === google.maps.drawing.OverlayType.POLYGON) {
                                    var path = newShape.getPaths().getAt(e.path);
                                    path.removeAt(e.vertex);
                                    if (path.length < 3) {
                                        newShape.setMap(null);
                                    }
                                }
                                if (newShape.type === google.maps.drawing.OverlayType.POLYLINE) {
                                    var path = newShape.getPath();
                                    path.removeAt(e.vertex);
                                    if (path.length < 2) {
                                        newShape.setMap(null);
                                    }
                                }
                            }
                            setSelection(newShape);
                        });
                        setSelection(newShape);
                    }
                });

                // Clear the current selection when the drawing mode is changed, or when the
                // map is clicked.
                google.maps.event.addListener(drawingManager, 'drawingmode_changed', clearSelection);
                google.maps.event.addListener(map, 'click', clearSelection);
                google.maps.event.addDomListener(document.getElementById('delete-button'), 'click', deleteSelectedShape);

                buildColorPalette();
            }
            google.maps.event.addDomListener(window, 'load', initialize);
        </script>
    </head>
    <body>
        <div id="panel">
            <div id="color-palette"></div>
            <div>
                <button id="delete-button">Delete Selected Shape</button>
            </div>
        </div>
        <div id="map"></div>
    </body>
</html>
 -->



<!-- <div id="panel">
  <input onclick="removeLine();" type=button value="Remove line">
  <input onclick="addLine();" type=button value="Restore line">
</div>
<div id="map_canvas"></div> -->

<!-- 
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:v="urn:schemas-microsoft-com:vml">
  <head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
  <META NAME="AUTHOR" CONTENT="Rakshith Krishnappa">
  <META NAME="DESCRIPTION" CONTENT="KML Tool - Get Latitude and Longitude for KML Polyline">
  <META NAME="KEYWORDS" CONTENT="Google, maps, mashup, tools, kml, polyline">
  <META NAME="ROBOTS" CONTENT="ALL"> 
  <meta http-equiv="X-UA-Compatible" content="IE=EmulateIE7" />
  <title>Mapmash | KML Creator | Tool to generate KML file for Polygon</title>
    <style type="text/css">
  <!--
      html {
        height: 100%; width:100%;overflow:hidden;
      } 
    body {
    background-color: white;
    font-family: Arial, sans-serif;
    font-size:10pt
   }
   h1 {
   font-size: 18pt;
   }   
    #map {
    height: 100%;
           }  
#hand_b {
  width:31px;
  height:31px;
  background-image: url(http://google.com/mapfiles/ms/t/Bsu.png);
}
#hand_b.selected {
  background-image: url(http://google.com/mapfiles/ms/t/Bsd.png);
}

#placemark_b {
  width:31px;
  height:31px;
  background-image: url(http://google.com/mapfiles/ms/t/Bmu.png);
}
#placemark_b.selected {
  background-image: url(http://google.com/mapfiles/ms/t/Bmd.png);
}

#line_b {
  width:31px;
  height:31px;
  background-image: url(http://google.com/mapfiles/ms/t/Blu.png);
}
#line_b.selected {
  background-image: url(http://google.com/mapfiles/ms/t/Bld.png);
}

#shape_b {
  width:31px;
  height:31px;
  background-image: url(http://google.com/mapfiles/ms/t/Bpu.png);
}
#shape_b.selected {
  background-image: url(http://google.com/mapfiles/ms/t/Bpd.png);
}      

  </style>
    <style type="text/css">
    v\:* {
      behavior:url(#default#VML);
    }
    </style>
    <script type="text/javascript" src="http://www.google.com/jsapi?key=ABQIAAAARX_oFA0uuXZlBmAao5L7OxReTpQ9ak0vkPAD7kyhumap4VzdtBTEp2yMytLvcUANG8vdgiy2tVD_Ew"></script>
    <script type="text/javascript">
      google.load("maps", "2");
    //<![CDATA[
  //rakf1 modified code taken from these 2 sources: - http://www.gorissen.info/Pierre/maps/googleMapLocationv4.php and - Distance Measurement Tool - Google Mapplets
  // argItems code taken from 
  // http://www.evolt.org/article/Javascript_to_Parse_URLs_in_the_Browser/17/14435/?format=print

  var map;
  var points = [];
  var markers = [];
  var polyline = null;
  var endMarker = null;
  var coordinates = '';
  var polyline_coordinates = [];
  var marker_coordinates = [];
  var marker;
  var polyline_count = 0;
  var kml_polyline_data = [];
    
  function updatePolyline() {
    if (points) {
    if (polyline) {
      map.removeOverlay(polyline);
    }
    polyline = new GPolyline(points, "#ff0000", 4, 0.45, {"geodesic": 1});
    map.addOverlay(polyline);

    }
  }
  
  function updatePolygon() {
    if (points) {
    if (polyline) {
      map.removeOverlay(polyline);
    }
    polyline = new GPolygon(points, "#ff0000", 4, 0.45, "#ff0000", 0.3, {"geodesic": 1});
    map.addOverlay(polyline);

    }
  } 

  function addStart(point) {
  
    var baseIcon = new GIcon();
    baseIcon.iconSize = new GSize(24, 38);
    baseIcon.shadowSize = new GSize(37, 34);
    baseIcon.iconAnchor = new GPoint(12, 34);
    baseIcon.shadow = "http://www.google.com/mapfiles/shadow50.png";

    var icon = new GIcon(baseIcon); 
    icon.image = "http://www.google.com/intl/en_de/mapfiles/icon-dd-play-trans.png";
    
    marker = new GMarker(point,icon);
    map.addOverlay(marker,icon);

    GEvent.addListener(marker, 'click', function() {
    points[0] = marker.getPoint();
    updatePolyline();
    });
  }

  function updateEnd(point) {
    if (!endMarker) {
    endMarker = new GMarker(point);
    endMarker.markerId = 'end';
    map.addOverlay(endMarker);
    }
    endMarker.setPoint(point);

    GEvent.addListener(endMarker, 'click', function() {
      points[points.length - 1] = endMarker.getPoint();
      updatePolyline();
    });
  }

  function deleteEnd() {
    if (endMarker) {
    var oldEnd = points.pop();
    if (points.length > 1) {
      var newEnd = points[points.length - 1];
      endMarker.setPoint(newEnd);
    } else {
      map.removeOverlay(endMarker);
      endMarker = null;
    }
    updatePolyline();
    polyline_coordinates.pop();
    load_data();    
    } else {
    restart();    
    }
  }

  function restart() {
  //  map.clearOverlays();
    map.removeOverlay(marker);
    points = [];
    polyline = null;
    endMarker = null;
    document.getElementById("geocode").value = "";
    for(var i=polyline_coordinates.length;i>-1;i--)
    polyline_coordinates.pop();
    load_data();  
  }

  function reset() {
    map.clearOverlays();
    restart();
    document.getElementById('kml_button').disabled = 'disabled';
    polyline_count = 0;
  }
  
  function show_coord () {
    var m = '';
    for(var i=0;i<polyline_coordinates.length;i++)
      m += polyline_coordinates[i]
    document.getElementById("coord").value = m; 
  }
  
  function load_data() {
    show_coord();
    if (polyline_coordinates.length > 0) document.getElementById("undo_button").disabled = '';
    else document.getElementById("undo_button").disabled = 'disabled';
  } 
  
  function show_kml() {
    var kml_header = '<?xml version="1.0" encoding="UTF-8"?>\n<kml xmlns="http://earth.google.com/kml/2.1">\n <Document>\n  <name>'+document.getElementById("kml_name").value+'</name>\n  <description>'+document.getElementById("kml_desc").value+'</description>';
    var kml_footer = '\n </Document>\n</kml>';
    var polyline_data = '';
    for(var i=0;i<polyline_count;i++) {//alert(kml_polyline_data[i]);
      polyline_data += kml_polyline_data[i];
    }
    document.getElementById("geocode").value = kml_header + polyline_data + kml_footer;
    document.getElementById("geocode").select();
  }

  function save_kml_polyline() {
    var kml_polyline_header = '\n  <Style id="style'+(polyline_count+1)+'">\n   <LineStyle>\n    <color>'+document.getElementById("polygon_color").value+'</color>\n    <width>'+document.getElementById("polygon_width").value+'</width>\n   </LineStyle>\n   <PolyStyle>\n    <color>'+document.getElementById("polygon_fill").value+'</color>\n   </PolyStyle>\n  </Style>\n  <Placemark>\n   <name>'+document.getElementById("polygon_name").value+'</name>\n   <description>'+document.getElementById("polygon_desc").value+'</description>\n   <styleUrl>#style'+(polyline_count+1)+'</styleUrl>\n   <Polygon>\n    <altitudeMode>relative</altitudeMode>\n    <LinearRing>\n     <coordinates>\n';
    var kml_polyline_footer = '    </coordinates>\n    </LinearRing>\n   </Polygon>\n  </Placemark>';
    
    var polyline_data = ''
    for(var i=0;i<polyline_coordinates.length;i++)
      polyline_data += polyline_coordinates[i]; 
    kml_polyline_data[polyline_count] = kml_polyline_header + polyline_data + kml_polyline_footer;  
  
    ++polyline_count;
    map.closeInfoWindow();
    map.removeOverlay(endMarker);
    map.removeOverlay(marker);  
    points = [];
    polyline = null;
    endMarker = null;
    for(var i=polyline_coordinates.length;i>-1;i--)
      polyline_coordinates.pop();
    document.getElementById("kml_button").disabled = '';
    load_data();    
  }
  
  function draw_polyline() {
    select('shape_b');
      GEvent.addListener(map, 'click', function(overlay, point) {
      if (point) {
        if (polyline) {
          updateEnd(point);
        } else {
          addStart(point);
        }

        points.push(point);
        updatePolyline();
        
        var lat = point.lat().toFixed(4);
        var lon = point.lng().toFixed(4);

            coordinates = lon + "," + lat + "\n";
        polyline_coordinates.push(coordinates);
        
        load_data();
      }
      else if (overlay && map.getInfoWindow().isHidden()) {
        if (points.length > 2) {
          if(overlay.getPoint() == points[0]) {
            var info_point = overlay.getPoint();
            points.push(info_point);
            
            var lat = info_point.lat().toFixed(4);
            var lon = info_point.lng().toFixed(4);
                coordinates = lon + "," + lat + "\n";
            polyline_coordinates.push(coordinates);           
            
            updatePolygon();            
            map.openInfoWindowHtml(info_point,'<div align="right"><div align="left" style="font-weight:bold;">Save Polygon</div><br>Polygon Name: <input type="text" size="15" id="polygon_name" value="Polygon '+(polyline_count+1)+'" /><br>Polygon Border Color (aBGR):<input type="text" size="15" id="polygon_color" value="990000ff" /><br>Polygon Border Width: <input type="text" size="15" id="polygon_width" value="4" /><br>Polygon Fill Color: <input type="text" size="15" id="polygon_fill" value="330000ff" /><br>Description: <textarea id="polygon_desc" cols="20" rows="3"></textarea><br><input type="button" value="Save" onclick="save_kml_polyline();"/></div>');
          }
        }
      }
       });  
  } 

  function showAddress(address) {
    var geocoder = new GClientGeocoder();
    geocoder.getLatLng(
    document.getElementById("input").value,
    function(point) {
      if (!point) {
      alert(address + " not found");
      } else {
      map.setCenter(point, 11);
      var marker = new GMarker(point);
      map.addOverlay(marker);
      marker.openInfoWindowHtml(address);
        GEvent.addListener(marker, 'click', function() {
        map.removeOverlay(marker);
        });     
      }
    }
    );
  }
  
function select(buttonId) {
  document.getElementById("shape_b").className="unselected";
  document.getElementById("line_b").className="unselected";
  document.getElementById("placemark_b").className="unselected";
  document.getElementById(buttonId).className="selected";
}
  
  function load(){
  //  map = new GMap2(document.getElementById("map"));
      map = new GMap2(document.getElementById("map"),{draggableCursor: 'crosshair', draggingCursor: 'crosshair'});
      map.addControl(new GLargeMapControl()); // added
      map.addControl(new GMapTypeControl()); // added
    map.addMapType(G_PHYSICAL_MAP);
    map.addControl(new GOverviewMapControl());      
    map.setCenter(new GLatLng(37.35, -121.93), 12);
    
    document.getElementById("undo_button").disabled = 'disabled';
    document.getElementById("kml_button").disabled = 'disabled';  

  //  select("hand_b");   

    draw_polyline();
   }
    //]]>
    </script>   
  </head>
  <body onload="load()" onunload="GUnload()">
  <table width="100%" height="100%">
    <tr style="vertical-align:top">
      <td style="width:320px">
        <table><tr>
        <td><a href="http://mapmash.googlepages.com"><img src="logo_mapmash_02.png" border="0"></a></td>
        <td><div id="placemark_b" onclick="location = 'kmlpoint.html'"/></td>
        <td><div id="line_b" onclick="location = 'kmlpolyline.html'"/></td>
        <td><div id="shape_b"/></td>
        </tr></table>
      </td>
      <td>
        <input type="button" value="New" onclick="reset()"/>
        <input id="undo_button" type="button" value="Undo" onclick="deleteEnd();" disabled="disabled"/>
        <input id="kml_button" type="button" value="Save as KML" onclick="document.getElementById('kml').style.visibility = 'visible';document.getElementById('geocode').value = '';" disabled="disabled"/>   
      </td>
      <td align="right">
        <nobr>
          <input id="input" type="text" size="25" name="address" value="Chicago, IL" />
          <input type="button" value="Go!" onclick="showAddress()" />
          </form>
        </nobr>    
      </td>
    </tr>  
    <tr>  
      <td valign="top">
        <br>
        <div style="width:300px;font-size:8pt"><h1>Polygon KML Creator</h1>Click on the map to start drawing lines and click on the green marker to finish and save the polygon. Select 'Save as KML' to generate KML file.</div>
        <br>
        <br>
        <br><b style="font-size:8pt">Coordinates (lng, lat):</b><br>
        <textarea id="coord" cols="30" rows="10" style="width:300px;"></textarea>
        <br>
        <br>  
          <script type="text/javascript"><!--
          google_ad_client = "pub-2773616400896769";
          /* maptools_300x250_01 */
          google_ad_slot = "1034665593";
          google_ad_width = 300;
          google_ad_height = 250;
          //-->
          <!--
          </script>
          <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
          </script>   
      </td>   
      <td colspan="2">
        <div style="position:relative;width:100%;height:100%">
          <div id="map" style="width:100%;height:630px;min-height:630px;border:1px solid #999;"></div>
          <div id="kml" style="position:absolute; visibility:hidden; width:600px;height:500px; top:20px; left:20px; padding:10px; border:1px solid #aaa; z-index:99999;background:#fff;" align="right">
            <input type="button" value="Close" onclick="document.getElementById('kml').style.visibility = 'hidden';"/> <br> <br>  
            KML Name - <input type="text" size="30" id="kml_name" value="KML Name" /><br>
            KML Description - <input type="text" size="30" id="kml_desc" value="KML Description" /><br>
            <textarea id="geocode" cols="70" rows="15"></textarea><br />
            <input type="button" value="Generate KML" onclick="show_kml();"/><br>
          </div>
        </div> 
      </td>
    </tr>
  </table>
    <script src="http://www.google-analytics.com/urchin.js" type="text/javascript">
    </script>
    <script type="text/javascript">
    _uacct = "UA-2417064-1";
    urchinTracker();
    </script> 
  </body>
</html> -->



<!-- <!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>GMaps.js &mdash; Geofences</title>
  <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js"></script>
  <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=true"></script>
  <%= javascript_include_tag 'application' %>
  <link rel="stylesheet" href="http://twitter.github.com/bootstrap/1.3.0/bootstrap.min.css" />
  <%= stylesheet_link_tag  'application', media: 'all' %>
  <script type="text/javascript">
    var map;
    $(document).ready(function(){
      map = new GMaps({
        el: '#map',
        lat: -12.043333,
        lng: -77.028333
      });
      var path = [
            [-12.040397656836609,-77.03373871559225],
            [-12.040248585302038,-77.03993927003302],
            [-12.050047116528843,-77.02448169303511],
            [-12.044804866577001,-77.02154422636042]
          ];

      polygon = map.drawPolygon({
        paths: path,
        strokeColor: '#BBD8E9',
        strokeOpacity: 1,
        strokeWeight: 3,
        fillColor: '#BBD8E9',
        fillOpacity: 0.6
      });

      var circle = map.drawCircle({
        lat: -12.040504866577001,
        lng: -77.02024422636042,
        radius: 350,
        strokeColor: '#432070',
        strokeOpacity: 1,
        strokeWeight: 3,
        fillColor: '#432070',
        fillOpacity: 0.6
      });

      map.addMarker({
        lat: -12.043333,
        lng: -77.028333,
        draggable: true,
        fences: [polygon],
        outside: function(m, f){
          alert('This marker has been moved outside of its fence');
        }
      });

      map.addMarker({
        lat: -12.040504866577001,
        lng: -77.02024422636042,
        draggable: true,
        fences: [circle],
        outside: function(m, f){
          alert('This marker has been moved outside of its fence');
        }
      });
    });
  </script>
</head>
<body>
  <h1>GMaps.js &mdash; Geofences</h1>
  <div class="row">
    <div class="span11">
      <div id="map"></div>
    </div>
    <div class="span6">
      <p>You can attach a geofence (which can be a polygon or a bounds) to a marker with:</p>
      <pre>polygon = map.drawPolygon({
  paths: path,
  strokeColor: '#BBD8E9',
  strokeOpacity: 1,
  strokeWeight: 3,
  fillColor: '#BBD8E9',
  fillOpacity: 0.6
});
map.addMarker({
  lat: -12.043333,
  lng: -77.028333,
  draggable: true,
  fences: [polygon],
  outside: function(marker, fence){
    alert('This marker has been moved outside of its fence');
  }
});</pre>
      <p>You must define an <strong>outside</strong> callback, which will use this <code>marker</code> and its <code>fence</code>.</p>
      <p><span class="label notice">Note: </span>You also can use <code>checkMarkerGeofence</code> or <code>checkGeofence</code> methods.</p>
    </div>
  </div>
</body>
</html> -->

